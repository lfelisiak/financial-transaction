{"version":3,"sources":["Transaction.js","Transactions.js","App.js","serviceWorker.js","index.js"],"names":["Transaction","props","useState","isOpen","setIsOpen","className","style","cursor","onClick","size","amount","color","type","pill","toLocaleUpperCase","fas","icon","id","far","date","Transactions","transactionsList","setTransactionsList","account","setAccount","useEffect","interval","setInterval","fetch","then","response","json","data","financialAccount","financialAccountHistory","clearInterval","length","map","t","key","effectiveDate","App","md","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qPAiCeA,EA/BK,SAAAC,GAAU,IAAD,EACAC,oBAAS,GADT,mBACpBC,EADoB,KACbC,EADa,KAE3B,OACE,kBAAC,IAAD,CAAkBC,UAAU,iEACpB,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAQA,UAAU,QAAQC,MAAO,CAACC,OAAO,WAAYC,QAAU,kBAAKJ,GAAWD,KAC7E,kBAAC,IAAD,CAAQM,KAAK,KACX,mCAASR,EAAMS,SAEjB,kBAAC,IAAD,CAAQD,KAAK,KACX,kBAAC,IAAD,CAAUJ,UAAU,aAAaM,MAAuB,UAAfV,EAAMW,KAAmB,SAAW,UACzEC,MAAI,GAAEZ,EAAMW,KAAKE,uBAIzB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAaX,OAAQA,GACnB,kBAAC,IAAD,CAASE,UAAU,QACjB,kBAAC,IAAD,KAAQ,2BAAG,kBAAC,IAAD,CAASU,KAAG,EAACC,KAAK,UAAUP,KAAK,OAApC,IAA4CR,EAAMgB,GAAlD,MACR,kBAAC,IAAD,KAAQ,2BAAG,kBAAC,IAAD,CAASF,KAAG,EAACC,KAAK,cAAcP,KAAK,OAAxC,IAAiDR,EAAMS,SACjF,kBAAC,IAAD,KAAQ,+BAAqB,UAAfT,EAAMW,KAAoB,kBAAC,IAAD,CAASM,KAAG,EAACF,KAAK,QAAQX,UAAU,WAAWI,KAAK,OAAW,kBAAC,IAAD,CAASS,KAAG,EAACF,KAAK,YAAYX,UAAU,aAAaI,KAAK,OAAzJ,IAAmKR,EAAMW,OAC/J,kBAAC,IAAD,KAAQ,2BAAG,kBAAC,IAAD,CAASM,KAAG,EAACF,KAAK,eAAeP,KAAK,OAAzC,IAAiDR,EAAMkB,cCmBnEC,EAxCK,WAAQ,IAAD,EACuBlB,mBAAS,IADhC,mBAClBmB,EADkB,KACDC,EADC,OAEKpB,mBAAS,IAFd,mBAElBqB,EAFkB,KAEVC,EAFU,KAoB1B,OARAC,qBAAU,WACR,IAAMC,EAAWC,aAAY,WAR7BC,MAAM,kDACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACJN,EAAWM,EAASE,KAAKC,kBACzBX,EAAoBQ,EAASE,KAAKE,8BAMjC,KAEH,OAAO,kBAAMC,cAAcT,OAI3B,kBAAC,IAAD,CAASrB,UAAU,cACnB,kBAAC,IAAD,CAAeM,MAAM,yBAArB,6BACA,kBAAC,IAAD,KACE,kBAAC,IAAD,KACI,iDAAmBY,EAAQN,IAAM,KACjC,uDAAyBM,EAAQb,QAAU,KAE7C,6CACA,kBAAC,IAAD,KAEKW,EAAiBe,OAAS,GAAKf,EAAiBgB,KAAI,SAAAC,GACnD,OAAO,kBAAC,EAAD,CAAa1B,KAAM0B,EAAE1B,KAAMF,OAAQ4B,EAAE5B,OAAQ6B,IAAKD,EAAErB,GAAIA,GAAIqB,EAAErB,GAAIE,KAAMmB,EAAEE,uB,kBCfhFC,MAbf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQC,GAAG,KAAKrC,UAAU,QACxB,mDAGJ,kBAAC,EAAD,QCHcsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7eb46b3a.chunk.js","sourcesContent":["import React,{useState,useEffect} from 'react';\r\nimport {MDBIcon,MDBContainer,MDBRow,MDBCol,MDBBadge,MDBListGroupItem,MDBCollapse} from \"mdbreact\";\r\nconst Transaction = props => {\r\n  const [isOpen,setIsOpen] = useState(false);\r\n  return (\r\n    <MDBListGroupItem className=\"d-flex transaction justify-content-between align-items-center\">\r\n            <MDBContainer>\r\n            <MDBRow className=\"w-100\" style={{cursor:\"pointer\"}} onClick={ ()=> setIsOpen(!isOpen) }>\r\n              <MDBCol size=\"8\">\r\n                <span>$ {props.amount}</span>\r\n              </MDBCol>\r\n              <MDBCol size=\"3\">\r\n                <MDBBadge className=\"ml-5 mw-25\" color={ props.type === \"debit\" ? \"danger\" : \"success\" }\r\n                    pill>{props.type.toLocaleUpperCase()}\r\n                </MDBBadge> \r\n              </MDBCol>\r\n            </MDBRow>\r\n            <MDBRow>\r\n              <MDBCol>\r\n                <MDBCollapse isOpen={isOpen}>\r\n                  <MDBRow  className=\"mt-4\">\r\n                    <MDBCol><p><MDBIcon fas icon=\"hashtag\" size=\"lg\"/> {props.id} </p></MDBCol>\r\n                    <MDBCol><p><MDBIcon fas icon=\"dollar-sign\" size=\"lg\" /> {props.amount}</p></MDBCol>\r\n  <MDBCol><p> {(props.type === \"debit\") ? <MDBIcon far icon=\"frown\" className=\"red-text\" size=\"lg\"  /> : <MDBIcon far icon=\"grin-beam\" className=\"green-text\" size=\"lg\" />} {props.type}</p></MDBCol>\r\n                    <MDBCol><p><MDBIcon far icon=\"calendar-alt\" size=\"lg\"/> {props.date}</p></MDBCol>\r\n                  </MDBRow>\r\n                </MDBCollapse>\r\n              </MDBCol>\r\n            </MDBRow>\r\n            </MDBContainer>\r\n    </MDBListGroupItem>\r\n  );\r\n}\r\nexport default Transaction;","import React, { useState, useEffect} from \"react\";\r\nimport Transaction from \"./Transaction\";\r\nimport {MDBCard,MDBCardHeader,MDBCardBody,MDBCardTitle,MDBListGroup} from \"mdbreact\";\r\nconst Transactions = ()  => {\r\n  const  [transactionsList,setTransactionsList ] = useState([]);\r\n  const  [account,setAccount ] = useState({});\r\n  \r\n  function fetchFinancialAccount(){\r\n    fetch(\"http://localhost:3001/api/v1/financial_account\")\r\n    .then(response => response.json())\r\n    .then(response =>{\r\n      setAccount(response.data.financialAccount);\r\n      setTransactionsList(response.data.financialAccountHistory);\r\n    });\r\n  }\r\n  useEffect(()=>{\r\n    const interval = setInterval(() => {\r\n      fetchFinancialAccount();\r\n    }, 3000);\r\n\r\n    return () => clearInterval(interval);\r\n  });\r\n\r\n  return (\r\n    <MDBCard className=\"w-100 mb-4\">\r\n    <MDBCardHeader color=\"deep-orange lighten-1\">Financial Account Details</MDBCardHeader>\r\n    <MDBCardBody>\r\n      <MDBCardTitle>\r\n          <p>{`Account id: ${account.id || ''}`}</p>\r\n          <p>{`Account amount: $ ${account.amount || 0}`}</p>\r\n      </MDBCardTitle>\r\n        <h5>Transactions:</h5>\r\n        <MDBListGroup>\r\n          {\r\n            (transactionsList.length > 0 && transactionsList.map(t => {\r\n              return <Transaction type={t.type} amount={t.amount} key={t.id} id={t.id} date={t.effectiveDate}></Transaction>\r\n            }))\r\n          }\r\n        </MDBListGroup>\r\n    </MDBCardBody>\r\n    </MDBCard>\r\n  )\r\n}\r\nexport default  Transactions;","import React from 'react';\nimport './App.css';\nimport Transactions from './Transactions';\nimport '@fortawesome/fontawesome-free/css/all.min.css'; \nimport 'bootstrap-css-only/css/bootstrap.min.css'; \nimport 'mdbreact/dist/css/mdb.css';\nimport { MDBContainer, MDBRow, MDBCol } from \"mdbreact\";\nfunction App() {\n  return (\n    <MDBContainer>\n      <MDBRow>\n        <MDBCol md=\"12\" className=\"mt-4\">\n          <h3>Financial Account</h3>\n        </MDBCol>\n      </MDBRow>\n      <Transactions></Transactions>\n    </MDBContainer>\n\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}